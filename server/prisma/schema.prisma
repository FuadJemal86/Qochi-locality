generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Family {
  id         Int        @id @default(autoincrement())
  familyName String
  address    String
  headId     Int        @unique
  head       FamilyHead @relation(fields: [headId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model FamilyHead {
  id                   Int                   @id @default(autoincrement())
  fullName             String
  contactInfo          String
  email                String                @unique
  password             String
  image                String?
  houseNumber          String
  familysize           String
  family               Family?
  isRemoved            Boolean               @default(false)
  type                 HeaderType?
  idRequests           IDRequest[]
  payments             Payment[]
  members              Member[]              @relation("FamilyHeadMembers")
  birthCertificates    BirthCertificate[]
  deathCertificates    DeathCertificate[]
  divorceCertificate   DivorceCertificate[]
  marriageCertificates MarriageCertificate[] // Added relation
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  certiAndId           certiAndId[]
}

model LocalityAccount {
  id            Int       @id @default(autoincrement())
  branch        String
  accountNumber String    @unique
  balance       Float     @default(0.0)
  payments      Payment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Member {
  id                   Int                   @id @default(autoincrement())
  fullName             String
  birthDate            DateTime
  type                 MemberType?
  relationship         String?
  education            String?
  occupation           String?
  status               MemberStatus          @default(ACTIVE)
  birthCertificate     String?
  image                String?
  deathCertificate     String?
  marriageCertificate  String?
  isRemoved            Boolean               @default(false)
  isApproved           Status                @default(PENDING)
  headId               Int?
  memberType           HomeType?
  memberTypeImage      String?
  head                 FamilyHead?           @relation("FamilyHeadMembers", fields: [headId], references: [id])
  idRestored           Boolean               @default(false)
  restorationDate      DateTime?
  restorationPayment   Float?
  idRequests           IDRequest[]
  whoMember            WhoMember             @default(Child)
  birthCertificates    BirthCertificate[]    @relation("MemberBirthCertificates")
  deathCertificates    DeathCertificate[]    @relation("MemberDeathCertificates")
  divorceCertificate   DivorceCertificate[]  @relation("MemberDivorceCertificate")
  marriageCertificates MarriageCertificate[] @relation("MemberMarriageCertificate")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model IDRequest {
  id               Int           @id @default(autoincrement())
  familyHeadId     Int
  memberId         Int
  fullName         String
  mothersName      String
  age              Int
  gender           String
  occupation       String
  phoneNumber      String
  placeOFBirth     String
  address          String
  houseNumber      String
  Nationality      String
  emergencyContact String
  image            String?
  gotImage         String?
  type             TypeRequest
  status           RequestStatus @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  familyHead       FamilyHead    @relation(fields: [familyHeadId], references: [id])
  member           Member        @relation(fields: [memberId], references: [id])
}

model Payment {
  id                Int             @id @default(autoincrement())
  familyHeadId      Int
  localityAccountId Int
  amount            Float
  transactionDate   DateTime        @default(now())
  familyHead        FamilyHead      @relation(fields: [familyHeadId], references: [id])
  localityAccount   LocalityAccount @relation(fields: [localityAccountId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model BirthCertificate {
  id                Int           @id @default(autoincrement())
  fullName          String
  gender            String
  dateOfBirth       DateTime
  placeOfBirth      String
  nationality       String
  country           String
  region            String
  zone              String
  woreda            String
  fatherFullName    String
  fatherNationality String
  fatherId          String
  motherFullName    String
  motherNationality String
  motherId          String
  document          String?
  status            RequestStatus @default(PENDING)
  familyHeadId      Int
  familyHead        FamilyHead    @relation(fields: [familyHeadId], references: [id])
  memberId          Int?
  member            Member?       @relation("MemberBirthCertificates", fields: [memberId], references: [id])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model DeathCertificate {
  id           Int           @id @default(autoincrement())
  fullName     String
  dateOfBirth  DateTime
  nationality  String
  placeOfDeath String
  dateOfDeath  DateTime
  document     String?
  status       RequestStatus @default(PENDING)
  familyHeadId Int
  familyHead   FamilyHead    @relation(fields: [familyHeadId], references: [id])
  memberId     Int?
  member       Member?       @relation("MemberDeathCertificates", fields: [memberId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model DivorceCertificate {
  id           Int        @id @default(autoincrement())
  familyHeadId Int
  familyHead   FamilyHead @relation(fields: [familyHeadId], references: [id])
  memberId     Int?
  member       Member?    @relation("MemberDivorceCertificate", fields: [memberId], references: [id])

  firstSpouseFullName     String
  firstSpouseBirthDate    DateTime
  firstSpouseNationality  String
  firstSpousePlaceOfBirth String

  secondSpouseFullName     String
  secondSpouseBirthDate    DateTime
  secondSpouseNationality  String
  secondSpousePlaceOfBirth String

  dateOfDivorce    DateTime
  countryAuthority String
  caseNumber       String
  placeOfDivorce   String

  documentFile String? // Filename of the uploaded document
  status       CertificateStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model MarriageCertificate {
  id Int @id @default(autoincrement())

  wifeFullName String
  wifeId       String
  memberId     Int?
  member       Member? @relation("MemberMarriageCertificate", fields: [memberId], references: [id])

  husbandFullName String
  husbandId       String

  dateOfMarriage  DateTime
  placeOfMarriage String

  country            String
  region             String
  cityAdministration String?
  zone               String
  city               String?
  subCity            String?
  woreda             String

  document String? // For storing the uploaded document filename
  status   RequestStatus @default(PENDING)

  familyHeadId Int
  familyHead   FamilyHead @relation(fields: [familyHeadId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model certiAndId {
  id           Int        @id @default(autoincrement())
  familyHeadId Int
  document     String?
  familyHead   FamilyHead @relation(fields: [familyHeadId], references: [id])
}

enum MemberType {
  NEWBORN
  PERMANENT
}

enum MemberStatus {
  ACTIVE
  MARRIED
  DECEASED
  LEFT_LOCALITY
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum HeaderType {
  Private
  Rental
  PublicHousing
}

enum TypeRequest {
  New
  updated
  Expired
}

enum HomeType {
  Rental
  Member
}

enum CertificateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WhoMember {
  Header
  Wife
  Child
}
