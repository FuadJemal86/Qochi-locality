generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Family {
  id         Int        @id @default(autoincrement())
  familyName String
  address    String
  headId     Int        @unique
  head       FamilyHead @relation(fields: [headId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model FamilyHead {
  id          Int         @id @default(autoincrement())
  fullName    String
  contactInfo String
  email       String      @unique
  password    String
  image       String?
  houseNumber String
  familysize  String
  family      Family?
  isRemoved   Boolean     @default(false)
  type        HeaderType?
  idRequests  IDRequest[]
  payments    Payment[]
  members     Member[]    @relation("FamilyHeadMembers") // Add the relation name
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model LocalityAccount {
  id            Int       @id @default(autoincrement())
  branch        String
  accountNumber String    @unique
  balance       Float     @default(0.0)
  payments      Payment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Member {
  id                  Int          @id @default(autoincrement())
  fullName            String
  birthDate           DateTime
  type                MemberType
  relationship        String?
  education           String?
  occupation          String?
  status              MemberStatus @default(ACTIVE)
  birthCertificate    String?
  image               String?
  deathCertificate    String?
  marriageCertificate String?
  isRemoved           Boolean      @default(false)
  isApproved          Status       @default(PENDING)
  headId              Int?
  memberType          HomeType
  memberTypeImage     String?
  head                FamilyHead?  @relation("FamilyHeadMembers", fields: [headId], references: [id])
  idRestored          Boolean      @default(false)
  restorationDate     DateTime?
  restorationPayment  Float?
  idRequests          IDRequest[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model IDRequest {
  id               Int           @id @default(autoincrement())
  familyHeadId     Int
  memberId         Int
  fullName         String
  mothersName      String
  age              Int
  gender           String
  occupation       String
  phoneNumber      String
  placeOFBirth     String
  address          String
  houseNumber      String
  Nationality      String
  emergencyContact String
  image            String?
  gotImage         String?
  type             TypeRequest
  status           RequestStatus @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  familyHead       FamilyHead    @relation(fields: [familyHeadId], references: [id])
  member           Member        @relation(fields: [memberId], references: [id])
}

model Payment {
  id                Int             @id @default(autoincrement())
  familyHeadId      Int
  localityAccountId Int
  amount            Float
  transactionDate   DateTime        @default(now())
  familyHead        FamilyHead      @relation(fields: [familyHeadId], references: [id])
  localityAccount   LocalityAccount @relation(fields: [localityAccountId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum MemberType {
  NEWBORN
  PERMANENT
}

enum MemberStatus {
  ACTIVE
  MARRIED
  DECEASED
  LEFT_LOCALITY
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum HeaderType {
  Private
  Rental
  PublicHousing
}

enum TypeRequest {
  New
  updated
  Expired
}

enum HomeType {
  Rental
}
